// <auto-generated />
using System;
using Creational;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Creational.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    [Migration("20230515002119_ImageLinks")]
    partial class ImageLinks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Creational.ParsingResult", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Exception")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("HasTruncationIssue")
                        .HasColumnType("bit");

                    b.Property<string>("Redirection")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Sha1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("WithTaxobox")
                        .HasColumnType("bit");

                    b.HasKey("Title");

                    b.ToTable("ParsingResults");
                });

            modelBuilder.Entity("Creational.TaxoboxEntry", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Key")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Title", "Key");

                    b.ToTable("TaxoboxEntries");
                });

            modelBuilder.Entity("Creational.TaxonomyEntry", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("NameDe")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Rank")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Title", "No");

                    b.HasIndex("Rank", "Title");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Rank", "Title"), new[] { "Name", "NameDe" });

                    b.HasIndex("Name", "Rank", "Title");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name", "Rank", "Title"), new[] { "NameDe" });

                    b.HasIndex("NameDe", "Rank", "Title");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("NameDe", "Rank", "Title"), new[] { "Name" });

                    b.ToTable("TaxonomyEntry");
                });

            modelBuilder.Entity("Creational.TaxonomyRelation", b =>
                {
                    b.Property<string>("Ancestor")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Descendant")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.HasKey("Ancestor", "Descendant");

                    b.HasIndex("Descendant", "Ancestor");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Descendant", "Ancestor"), new[] { "No" });

                    b.ToTable("TaxonomyRelations");
                });

            modelBuilder.Entity("Creational.WikiImageLink", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Title", "Position");

                    b.ToTable("ImageLinks");
                });

            modelBuilder.Entity("Creational.WikiPage", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Issue")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("Ns")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<string>("StepError")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Title");

                    b.HasIndex("Step", "Type");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Creational.WikiPageContent", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Format")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RedirectTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Sha1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Title");

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("Creational.WikiTaxobox", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Sha1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Taxobox")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.HasKey("Title");

                    b.ToTable("Taxoboxes");
                });

            modelBuilder.Entity("Creational.ParsingResult", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithOne("Parsed")
                        .HasForeignKey("Creational.ParsingResult", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.TaxoboxEntry", b =>
                {
                    b.HasOne("Creational.ParsingResult", "ParsedPage")
                        .WithMany("TaxoboxEntries")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParsedPage");
                });

            modelBuilder.Entity("Creational.TaxonomyEntry", b =>
                {
                    b.HasOne("Creational.ParsingResult", "ParsedPage")
                        .WithMany("TaxonomyEntries")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParsedPage");
                });

            modelBuilder.Entity("Creational.TaxonomyRelation", b =>
                {
                    b.HasOne("Creational.WikiPage", "AncestorPage")
                        .WithMany()
                        .HasForeignKey("Ancestor")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Creational.WikiPage", "DescendantPage")
                        .WithMany()
                        .HasForeignKey("Descendant")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AncestorPage");

                    b.Navigation("DescendantPage");
                });

            modelBuilder.Entity("Creational.WikiImageLink", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithMany("ImageLinks")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.WikiPageContent", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithOne("Content")
                        .HasForeignKey("Creational.WikiPageContent", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.WikiTaxobox", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithOne("Taxobox")
                        .HasForeignKey("Creational.WikiTaxobox", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.ParsingResult", b =>
                {
                    b.Navigation("TaxoboxEntries");

                    b.Navigation("TaxonomyEntries");
                });

            modelBuilder.Entity("Creational.WikiPage", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("ImageLinks");

                    b.Navigation("Parsed");

                    b.Navigation("Taxobox");
                });
#pragma warning restore 612, 618
        }
    }
}
