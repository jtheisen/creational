// <auto-generated />
using System;
using Creational;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Creational.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    [Migration("20231115001959_ExtinctSituationAndRefactorings")]
    partial class ExtinctSituationAndRefactorings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Creational.ParsingResult", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Exception")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("HasDuplicateTaxoboxEntries")
                        .HasColumnType("bit");

                    b.Property<int>("ImageSituation")
                        .HasColumnType("int");

                    b.Property<string>("Redirection")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Sha1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Lang", "Title");

                    b.ToTable("ParsingResults");
                });

            modelBuilder.Entity("Creational.SpeciesValues", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ExtantSituation")
                        .HasColumnType("int");

                    b.Property<string>("Genus")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Species")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Taxon")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Lang", "Title");

                    b.ToTable("SpeciesValues");
                });

            modelBuilder.Entity("Creational.TaxoboxEntry", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Key")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Value")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Lang", "Title", "Key");

                    b.ToTable("TaxoboxEntry");
                });

            modelBuilder.Entity("Creational.TaxoboxImageEntry", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Filename")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .UseCollation("Latin1_General_BIN2");

                    b.HasKey("Lang", "Title");

                    b.ToTable("TaxoboxImageEntries");
                });

            modelBuilder.Entity("Creational.TaxonomyRelation", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Ancestor")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Descendant")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.HasKey("Lang", "Ancestor", "Descendant");

                    b.HasIndex("Lang", "Descendant", "Ancestor");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Lang", "Descendant", "Ancestor"), new[] { "No" });

                    b.ToTable("TaxonomyRelations");
                });

            modelBuilder.Entity("Creational.TaxoTemplateValues", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("PageTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Parent")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Rank")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("SameAs")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Lang", "Title");

                    b.ToTable("TaxoTemplateValues");
                });

            modelBuilder.Entity("Creational.WikiImageData", b =>
                {
                    b.Property<string>("Filename")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Error")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Filename", "Kind");

                    b.ToTable("ImageData");
                });

            modelBuilder.Entity("Creational.WikiImageLink", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Lang", "Title", "Position");

                    b.ToTable("ImageLinks");
                });

            modelBuilder.Entity("Creational.WikiPage", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Issue")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int>("Ns")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<string>("StepError")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Lang", "Title");

                    b.HasIndex("Lang", "Id")
                        .IsUnique();

                    b.HasIndex("Lang", "StepError");

                    b.HasIndex("Lang", "Step", "Type");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Creational.WikiPageContent", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Format")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RedirectTitle")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Sha1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Lang", "Title");

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("Creational.WikiResolvedImage", b =>
                {
                    b.Property<string>("Filename")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Filename");

                    b.ToTable("ResolvedImages");
                });

            modelBuilder.Entity("Creational.WikiTaxobox", b =>
                {
                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Sha1")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Taxobox")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Lang", "Title");

                    b.ToTable("Taxoboxes");
                });

            modelBuilder.Entity("Creational.WikiTaxoboxImage", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Filename")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("Lang")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Title");

                    b.ToTable("TaxoboxImages");
                });

            modelBuilder.Entity("Creational.ParsingResult", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithOne("Parsed")
                        .HasForeignKey("Creational.ParsingResult", "Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.SpeciesValues", b =>
                {
                    b.HasOne("Creational.ParsingResult", "ParsedPage")
                        .WithOne("SpeciesValues")
                        .HasForeignKey("Creational.SpeciesValues", "Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParsedPage");
                });

            modelBuilder.Entity("Creational.TaxoboxEntry", b =>
                {
                    b.HasOne("Creational.ParsingResult", "ParsedPage")
                        .WithMany("TaxoboxEntries")
                        .HasForeignKey("Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParsedPage");
                });

            modelBuilder.Entity("Creational.TaxoboxImageEntry", b =>
                {
                    b.HasOne("Creational.ParsingResult", "ParsedPage")
                        .WithMany("TaxoboxImageEntries")
                        .HasForeignKey("Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParsedPage");
                });

            modelBuilder.Entity("Creational.TaxonomyRelation", b =>
                {
                    b.HasOne("Creational.WikiPage", "AncestorPage")
                        .WithMany()
                        .HasForeignKey("Lang", "Ancestor")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Creational.WikiPage", "DescendantPage")
                        .WithMany()
                        .HasForeignKey("Lang", "Descendant")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AncestorPage");

                    b.Navigation("DescendantPage");
                });

            modelBuilder.Entity("Creational.TaxoTemplateValues", b =>
                {
                    b.HasOne("Creational.ParsingResult", "ParsedPage")
                        .WithOne("TaxoTemplateValues")
                        .HasForeignKey("Creational.TaxoTemplateValues", "Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParsedPage");
                });

            modelBuilder.Entity("Creational.WikiImageLink", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithMany("ImageLinks")
                        .HasForeignKey("Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.WikiPageContent", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithOne("Content")
                        .HasForeignKey("Creational.WikiPageContent", "Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.WikiTaxobox", b =>
                {
                    b.HasOne("Creational.WikiPage", "Page")
                        .WithOne("Taxobox")
                        .HasForeignKey("Creational.WikiTaxobox", "Lang", "Title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Creational.ParsingResult", b =>
                {
                    b.Navigation("SpeciesValues");

                    b.Navigation("TaxoTemplateValues");

                    b.Navigation("TaxoboxEntries");

                    b.Navigation("TaxoboxImageEntries");
                });

            modelBuilder.Entity("Creational.WikiPage", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("ImageLinks");

                    b.Navigation("Parsed");

                    b.Navigation("Taxobox");
                });
#pragma warning restore 612, 618
        }
    }
}
